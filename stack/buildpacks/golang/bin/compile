#!/usr/bin/env bash
# usage: bin/compile <build-dir> <cache-dir> <env-dir>

# This is a modified version of https://github.com/kr/heroku-buildpack-go/blob/master/bin/compile

set -eo pipefail

# Go releases have moved to a new URL scheme
# starting with Go version 1.2.2. Return the old
# location for known old versions and the new
# location otherwise.
urlfor() {
  ver=$1
  file=$2
  case $ver in
    go1.0*|go1.1beta*|go1.1rc*|go1.1|go1.1.*|go1.2beta*|go1.2rc*|go1.2|go1.2.1)
      echo http://go.googlecode.com/files/$file
      ;;
    *)
      echo https://storage.googleapis.com/golang/$file
      ;;
  esac
}

build=$1
cache=$2/golang
mkdir -p "$1" "$cache"

arch=$(uname -m|tr A-Z a-z)
if test $arch = x86_64
then arch=amd64
fi
plat=$(uname|tr A-Z a-z)-$arch

heroku_buildpack_bin='https://github.com/kr/heroku-buildpack-go/raw/master/linux-amd64/bin'
target="${HOME}/bin"
if [ -f $build/Godeps ] || [ -d $build/Godeps ]; then
  if ! [ -f ${target}/godep ]; then
    echo "-----> Installing godep to ${target}..."
    if ! [ -f ${cache}/godep ]; then
      curl -L -s ${heroku_buildpack_bin}/godep > ${cache}/godep
    fi
    cp ${cache}/godep ${target}/godep
    chmod +x ${target}/godep
    echo ' done'
  else
    echo "-----> Using ${target}/godep"
  fi
fi
PATH=$target:$PATH

if test -f $build/Godeps; then
  name=$(<$build/Godeps jq -r .ImportPath)
  ver=$(<$build/Godeps jq -r .GoVersion)
elif test -d $build/Godeps; then
  name=$(<$build/Godeps/Godeps.json jq -r .ImportPath)
  ver=$(<$build/Godeps/Godeps.json jq -r .GoVersion)
elif test -f $build/.godir; then
  name=$(cat $build/.godir)
elif test -d $build/.git ; then
  pushd $build &> /dev/null
  # REFACTOR: I'm pretty sure this can be cleaned up
  name=$(git config --get-regexp '^remote.+\.url' | grep github | head -n1 | cut -f2 -d' ' | sed 's/^\(git\|https\):\/\///' | sed 's/^\w\+@//' | sed 's/:/\//' | sed 's/\.git$//')
  popd &> /dev/null
fi
ver=${ver:-go${GOVERSION:-1.4.1}}

file=${GOFILE:-$ver.$(uname|tr A-Z a-z)-amd64.tar.gz}
url=${GOURL:-$(urlfor $ver $file)}

if [ -d ${HOME}/go ]; then
  echo "-----> Using $(${HOME}/go/bin/go version)"
else
  mkdir -p $cache/$ver
  cd $cache/$ver
  if test -f $cache/$ver/$file; then
    echo "-----> Using $ver"
  else
    echo "-----> Downloading ${ver}..."
    curl -sLO $url
    echo "done"
  fi
  tar zxf $file -C ${HOME}
fi

GOROOT=${HOME}/go export GOROOT
PATH=$GOROOT/bin:$PATH export PATH

GOPATH=${HOME}/gocode export GOPATH
GOBIN=$GOPATH/bin export GOBIN
PATH=$GOBIN:$PATH export PATH

if [ -d $GOPATH ]; then
  sudo chown developer:developer $GOPATH
  if [ -d $GOPATH/src ]; then
    sudo chown developer:developer $GOPATH/src
    for dir in $GOPATH/src/*; do
      sudo chown developer:developer $dir
    done
    for dir in $GOPATH/src/**/*; do
      sudo chown developer:developer $dir
    done
  fi
else
  mkdir -p $GOBIN
  mkdir -p $GOPATH
fi

if ! [ -f ${HOME}/.profile.d/go.sh ]; then
  echo "-----> Configuring ${ver}..."
  echo "export GOPATH=$GOPATH" > ${HOME}/.profile.d/go.sh
  echo "export GOROOT=$GOROOT" >> ${HOME}/.profile.d/go.sh
  echo "export GOBIN=$GOBIN" >> ${HOME}/.profile.d/go.sh
  echo 'export PATH=$PATH:$GOROOT/bin' >> ${HOME}/.profile.d/go.sh
  echo 'export PATH=$PATH:$GOBIN' >> ${HOME}/.profile.d/go.sh
  echo 'done'
fi

if [ -z "${name}" ] && [ -n "${GO_PROJECT_NAME}" ]; then
  name=$GO_PROJECT_NAME
fi

if [ -z "${name}" ]; then
  echo -e "-----> Unable to identify project name\nPlease add the full import path to \`.godir\` or set the GO_PROJECT_NAME environmental variable"
  p=$build
else
  p=$GOPATH/src/$name
  if ! [ -d $GOPATH/src/$name ]; then
    mkdir -p $(dirname $p)
    if [ -L $p ] && ! [ -e $p ]; then
      unlink $p
    fi
    if ! [ -L $p ]; then
      ln -s $build $p
    fi
  fi
fi

unset GIT_DIR # unset git dir or it will mess with goinstall
cd $p
if test -e $build/Godeps
then
  echo "-----> Running: godep go build -o $(basename $name)"
  godep go build -o $(basename $name)
else
  echo "-----> Running: go get -d -v"
  go get -d -v
fi
